1st Program Java:


package pkg1;



import java.util.Scanner;



public class Matrix {



	public static void main (String[] args) { 

		Scanner scanner = new Scanner(System.in); 

		System.out.println("Enter the value of N:");

		int N = scanner.nextInt();

		int[][] firstMatrix = new int[N][N]; 

		int[][] secondMatrix = new int[N][N];

		int[][] resultMatrix = new int[N][N];

		System.out.println("Enter the elements of first matrix:");

		for (int i = 0; i < N; i++) { 

			for (int j = 0; j < N; j++) { 

				firstMatrix[i][j] = scanner.nextInt(); 

				

			}

		}

		System.out.println("Enter the elements of second matrix:");

		for (int i = 0; i < N; i++) { 

			for (int j = 0; j < N; j++) { 

				secondMatrix[i][j] = scanner.nextInt(); 

				

			}

		}

		for (int i = 0; i < N; i++) { 

			for (int j = 0; j < N; j++) { 

				resultMatrix[i][j] = firstMatrix[i][j] + secondMatrix[i][j]; 

			}



		}

		

		System.out.println("The elements of result matrix:"); 

		for (int i = 0; i < N; i++) { 

			for (int j = 0; j < N; j++) { 

				System.out.print(resultMatrix[i][j] + " "); 

			}

			System.out.println(); 

		}

	}

}





2nd Program Java :


package pkg1;



public class StackOperations {

	private int[] stack;

	private int top;

	private int maxsize;

	

	public StackOperations(int maxsize) {

		this.maxsize = maxsize;

		stack = new int[maxsize];

		top = -1;

	}

	

	public void push (int item) {

		if(!isFull()) {

			stack[++top] = item;

		} else {

			System.out.println("Stack is full");

		}

	}

	

	public int pop() {

		if(!isEmpty()) {

			int poppedElement = stack[top];

			top--;

			return poppedElement;

		} else {

			System.out.println("Stack is empty");

			return -1;

		}

	}

	

	public int peek() {

		if(!isEmpty()) {

			return stack[top];

		} else {

			System.out.println("Stack is empty");

			return -1;

		}

	}

	

	public boolean isEmpty() {

		return top == -1;

	}

	

	public boolean isFull() {

		return top == maxsize - 1;

	}

	

	public void printStack() {

		for(int i = 0; i <= top; i++) {

			System.out.print(stack[i] + " ");

		}

		System.out.println();

	}

	

	public static void main (String[] args) {

		StackOperations stack = new StackOperations(10);

		System.out.println("Pushing integers onto the stack: ");

		for(int i = 0; i < 10; i++) {

			stack.push(i);

		}

		System.out.println("Stack after pushing :");

		stack.printStack();

		

		System.out.println("Popping integers off the stack:");

		for(int i = 0; i < 5; i++) {

			int poppedElement = stack.pop();

			System.out.println("Popped Element: " + poppedElement);

			System.out.println("Stack after pop:");

			stack.printStack();

		}

	}

}



3rd Program Java:



package pkg1;



import java.util.Scanner;



public class Employee {



    private int id;

    private String name;

    private double salary;



    public Employee(int id, String name, double salary) {

        this.id = id;

        this.name = name;

        this.salary = salary;

    }



    public void raiseSalary(double percent) {

        double increase = salary * percent / 100;

        salary += increase;

    }



    public int getId() {

        return id;

    }



    public String getName() {

        return name;

    }



    public double getSalary() {

        return salary;

    }



    public String toString() {

        return "Employee{" + "name=" + name + ", id=" + id + ", Salary=" + salary + '}';

    }



    public static void main(String[] args) {

        Employee employee = new Employee(123, "Rohan", 75000);



        System.out.println("Employee before salary increase: " + employee);

        System.out.println("Enter how much percent increment you want to give to employee:");

        try (Scanner sc = new Scanner(System.in)) {

			double i = sc.nextDouble();

			employee.raiseSalary(i);

		}

        System.out.println("Employee salary after increase: " + employee);

    }

}



7th Program Java:


package pkg1;

interface Resizable {

	 void resizeWidth(int width);

	 void resizeHeight(int height);

	}



	class Rectangle implements Resizable {

	 private int width;

	 private int height;



	 public Rectangle(int width, int height) {

	  this.width = width;

	  this.height = height;

	 }



	 @Override

	 public void resizeWidth(int width) {

	  this.width = width;

	 }



	 @Override

	 public void resizeHeight(int height) {

	  this.height = height;

	 }



	 public int getWidth() {

	  return width;

	 }



	 public int getHeight() {

	  return height;

	 }

	}



	class Resizable_main {

	 public static void main(String args[]) {

	  Rectangle rectangle = new Rectangle(10, 20);

	  System.out.println("Original width: " + rectangle.getWidth());

	  System.out.println("Original height: " + rectangle.getHeight());

	  rectangle.resizeWidth(30);

	  rectangle.resizeHeight(40);

	  System.out.println("New width: " + rectangle.getWidth());

	  System.out.println("New height: " + rectangle.getHeight());

	 }

	}



8th Program Java:


package pkg1;



public class OuterInner {

	 public void display() {

	  System.out.println("Outer class display method:");

	  System.out.println("In Java, first outer class will execute...");

	 }



	 class Inner {

	  public void display() {

	   System.out.println("Inner class display method:");

	   System.out.println("After outer class, inner class will execute...");

	  }

	 }



	 public static void main(String[] args) {

	  OuterInner outer = new OuterInner();

	  outer.display();

	  OuterInner.Inner inner = outer.new Inner();

	  inner.display();

	 }

	}



9th Program Java:



package pkg1;



public class OuterInner {

	 public void display() {

	  System.out.println("Outer class display method:");

	  System.out.println("In Java, first outer class will execute...");

	 }



	 class Inner {

	  public void display() {

	   System.out.println("Inner class display method:");

	   System.out.println("After outer class, inner class will execute...");

	  }

	 }



	 public static void main(String[] args) {

	  OuterInner outer = new OuterInner();

	  outer.display();

	  OuterInner.Inner inner = outer.new Inner();

	  inner.display();

	 }

	}



11th Program Java:


package Thread_Example;

public class Thread_Example implements Runnable {

	 private String name;



	 public Thread_Example(String name) {

	  this.name = name;

	 }



	 @Override

	 public void run() {

	  System.out.println("Thread started: " + name);

	  try {

	   Thread.sleep(500);

	  } catch (InterruptedException e) {

	   e.printStackTrace();

	  }

	  System.out.println("Thread ended: " + name);

	 }



	 public static void main(String[] args) {

	  Thread_Example runnableExample1 = new Thread_Example("Thread-1");

	  Thread_Example runnableExample2 = new Thread_Example("Thread-2");

	  Thread_Example runnableExample3 = new Thread_Example("Thread-3");

	  Thread thread1 = new Thread(runnableExample1);

	  Thread thread2 = new Thread(runnableExample2);

	  Thread thread3 = new Thread(runnableExample3);

	  thread1.start();

	  thread2.start();

	  thread3.start();

	 }

	}



12th Program Java:


package MyThread;



public class MyThread extends Thread {

	 public MyThread() {

	  super();

	  System.out.println("Child Thread");

	 }



	 @Override

	 public void run() {

	  try {

	   for (int i = 0; i < 5; i++) {

	    System.out.println("Child Thread: " + i);

	    Thread.sleep(500);

	   }

	  } catch (InterruptedException e) {

	   e.printStackTrace();

	  }

	 }



	 public static void main(String[] args) {

	  MyThread myThread = new MyThread();

	  myThread.start();

	  try {

	   for (int i = 0; i < 5; i++) {

	    System.out.println("Main Thread: " + i);

	    Thread.sleep(500);

	   }

	  } catch (InterruptedException e) {

	   e.printStackTrace();

	  }

	 }

	}

